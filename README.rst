FBRBMWCN
--------

Function-Based Regex Builder Module Without a Clever Name.

WHAT
====

A tool to help interactively develop regexes. 

Example
=======

In the US, one way a phone number can be expressed is as a sequence of:


- **area code**: three digits, possibly wrapped with parentheses
- **separator**: space(s), dash, dot, or non-existent
- **prefix**: three digits
- **separator**: space(s), dash, dot, or non-existent
- **suffix**: four digits


.. code-block:: python
    
    from rx import *

    area_code = compose(
        digit(), exactly_n_times(3),
        OR(),
        find('('), digit(), exactly_n_times(3), then(')')
    )

    print(area_code) # '\\d{3}|\\(\\d{3}\\)'

    separator = compose(
        spaces(), OR(), dot(), OR(), match('-')
    )

    separator_maybe = compose(group(separator), maybe())

    print(separator_maybe) # '(\\s+|\\.|\\-)?'

    prefix = compose(digit(), exactly_n_times(3))

    print(prefix) # '\\d{3}'

    suffix = compose(digit(), exactly_n_times(4))

    print(suffix) # '\\d{4}'

    phone_number_pattern = compose(
        area_code,
        separator_maybe,
        prefix,
        separator_maybe,
        suffix
    )

    rx(phone_number_pattern) == re.compile('\\d{3}|\\(\\d{3}\\)(\\s+|\\.|\\-)?\\d{3}(\\s+|\\.|\\-)?\\d{4}') # True



BUILTIN PATTERNS
----------------

Pattern Functions That Take Input
=================================

+------------------------------------+----------------------------------------------+--------------------------+
| Pattern Function                   | Example Input                                | Example Output           |
+====================================+==============================================+==========================+
| match(v)                           | ``match('Donuts+')``                         | ``Donuts\\+``            |
+------------------------------------+----------------------------------------------+--------------------------+
| anything_but(v)                    | ``anything_but('a backpack')``               | ``[^a\\ backpack]*``     |
+------------------------------------+----------------------------------------------+--------------------------+
| something_but(v)                   | ``something_but('nothing')``                 | ``[^nothing]+``          |
+------------------------------------+----------------------------------------------+--------------------------+
| any_of(v)                          | ``any_of('abcd')``                           | ``[abcd]``               |
+------------------------------------+----------------------------------------------+--------------------------+
| char_range(from, to)               | ``char_range('A','Z')``                      | ``A-Z``                  |
+------------------------------------+----------------------------------------------+--------------------------+
| between_n_and_m_times(n,m)         | ``between_n_and_m_times(2,7)``               | ``{2,7}``                |
+------------------------------------+----------------------------------------------+--------------------------+
| exactly_n_times(n)                 | ``exactly_n_times(7)``                       | ``{7}``                  |
+------------------------------------+----------------------------------------------+--------------------------+
| group(\*patterns)                  | ``group(match('p'), OR(), match('q'))``      | ``(p|q)``                |
+------------------------------------+----------------------------------------------+--------------------------+
| named_group(name, \*patterns)      | ``named_group('secure', match('https://'))`` | ``(?P<secure>https://)`` |
+------------------------------------+----------------------------------------------+--------------------------+
| non_capturing_group(\*patterns)    | ``non_capturing_group(match('http'))``       | ``(?:http)``             |
+------------------------------------+----------------------------------------------+--------------------------+
| followed_by(v)                     | ``followed_by('...')``                       | ``(?=\\.\\.\\.)``        |
+------------------------------------+----------------------------------------------+--------------------------+
| not_followed_by(v)                 | ``not_followed_by('...')``                   | ``(?!\\.\\.\\.)``        |
+------------------------------------+----------------------------------------------+--------------------------+

Pattern Functions That Do Not Take Input
========================================    

+------------------------------------+--------------------------+
| Pattern Function                   | Example Output           |
+====================================+==========================+
| start_of_line()                    | ``^``                    |
+------------------------------------+--------------------------+
| end_of_line()                      | ``$``                    |
+------------------------------------+--------------------------+
| word()                             | ``\w+``                  |
+------------------------------------+--------------------------+
| digit()                            | ``\d``                   |
+------------------------------------+--------------------------+
| something()                        | ``.+``                   |
+------------------------------------+--------------------------+
| anything()                         | ``.*``                   |
+------------------------------------+--------------------------+
| maybe()                            | ``?``                    |
+------------------------------------+--------------------------+
| zero_or_more_times()               | ``*``                    |
+------------------------------------+--------------------------+
| one_or_more_times()                | ``+``                    |
+------------------------------------+--------------------------+
| OR()                               | ``|``                    |
+------------------------------------+--------------------------+
| tab()                              | ``\t``                   |
+------------------------------------+--------------------------+
| space()                            | ``\s``                   |
+------------------------------------+--------------------------+
| spaces()                           | ``\s+``                  |
+------------------------------------+--------------------------+
| word_boundary()                    | ``\b``                   |
+------------------------------------+--------------------------+
| linebreak()                        | ``(?:(?:\n)|(?:\r\n))``  |
+------------------------------------+--------------------------+
| dot()                              | ``\\.``                  |
+------------------------------------+--------------------------+
| dots()                             | ``\\.+``                 |
+------------------------------------+--------------------------+

